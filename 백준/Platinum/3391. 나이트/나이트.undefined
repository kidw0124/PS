#include<bits/stdc++.h>
#include <immintrin.h>
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
#ifdef kidw0124
constexpr bool ddebug = true;
#else
constexpr bool ddebug = false;
#endif
using ll = int;
using pll = pair<ll,ll>;
#define debug if constexpr(ddebug) cout << "[DEBUG] "

ll mod_inverse(ll a, ll m) {
    ll m0 = m, t, q;
    ll x0 = 0, x1 = 1;
    if (m == 1) return 0;
    while (a > 1) {
        q = a / m;
        t = m;
        m = a % m, a = t;
        t = x0;
        x0 = x1 - q * x0;
        x1 = t;
    }
    if (x1 < 0) x1 += m0;
    return x1;
}

constexpr ll mod = 1e9 + 7;


struct BipartiteMatching {
    int n, m;
    vector<vector<int>> graph;
    vector<int> matched, match, edgeview, level;
    vector<int> reached[2];
    BipartiteMatching(int n, int m) : n(n), m(m), graph(n), matched(m, -1), match(n, -1) {}

    bool assignLevel() {
        bool reachable = false;
        level.assign(n, -1);
        reached[0].assign(n, 0);
        reached[1].assign(m, 0);
        queue<int> q;
        for (int i = 0; i < n; i++) {
            if (match[i] == -1) {
                level[i] = 0;
                reached[0][i] = 1;
                q.push(i);
            }
        }
        while (!q.empty()) {
            auto cur = q.front(); q.pop();
            for (auto adj : graph[cur]) {
                reached[1][adj] = 1;
                auto next = matched[adj];
                if (next == -1) {
                    reachable = true;
                }
                else if (level[next] == -1) {
                    level[next] = level[cur] + 1;
                    reached[0][next] = 1;
                    q.push(next);
                }
            }
        }
        return reachable;
    }

    int findpath(int nod) {
        for (int &i = edgeview[nod]; i < graph[nod].size(); i++) {
            int adj = graph[nod][i];
            int next = matched[adj];
            if (next >= 0 && level[next] != level[nod] + 1) continue;
            if (next == -1 || findpath(next)) {
                match[nod] = adj;
                matched[adj] = nod;
                return 1;
            }
        }
        return 0;
    }

    int solve() {
        int ans = 0;
        while (assignLevel()) {
            edgeview.assign(n, 0);
            for (int i = 0; i < n; i++)
                if (match[i] == -1)
                    ans += findpath(i);
        }
        return ans;
    }
};
void solve(ll testcase){
    ll i,j;
    ll n,m;
    cin>>n>>m;
    vector<vector<bool>>xxx(n+1, vector<bool>(n+1, false));
    for(i=0;i<m;i++){
        ll x,y;
        cin>>x>>y;
        xxx[x][y] = true;
    }
    map<pll,ll>mp1, mp2;
    ll v1=0,v2=0;
    for(i=1;i<=n;i++){
        for(j=1;j<=n;j++){
            if(xxx[i][j]) continue;
            if((i+j)&1) mp1[{i,j}] = v1++;
            else mp2[{i,j}] = v2++;
        }
    }
//    cout<<mp.size()<<"\n";
    BipartiteMatching bipartite_matching(v1, v2);
    for(i=1;i<=n;i++){
        for(j=1;j<=n;j++){
            ll dx[]={1,1,-1,-1,2,2,-2,-2}, dy[]={2,-2,2,-2,1,-1,1,-1};
            if(xxx[i][j]) continue;
            for(ll k=0;k<8;k++){
                ll x=i+dx[k],y=j+dy[k];
                if(x>=1&&x<=n&&y>=1&&y<=n&&!xxx[x][y]){
                    if((i+j)&1) {
                        bipartite_matching.graph[mp1[{i,j}]].push_back(mp2[{x,y}]);
                    }
                }
            }
        }
    }

    ll ans = bipartite_matching.solve();
//    cout<<ans<<"\n";
    cout<<n*n-m-ans<< "\n";

}

void setup() {
    if(ddebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;
}

signed main() {
    setup();
    preprocess();
    ll t = 1;
//    cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}