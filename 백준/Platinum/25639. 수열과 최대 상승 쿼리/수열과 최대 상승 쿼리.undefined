#include<bits/stdc++.h>
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
typedef unsigned long long ull;
typedef __float128 LD;
typedef __int128_t LL;
typedef __uint128_t ULL;
typedef pair<ll, ll> pii;
typedef vector<ll> vi;
typedef pair<ll, ll> pll;
typedef vector<ll> vl;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
using namespace __gnu_pbds;
#pragma warning(disable : 4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
#define pb(x) push_back(x)
#define all(x) (x).begin(), (x).end()
#define rep(i, a, b) for (auto i = (a); i < (b); i++)
#define each(x, a) for (auto &x : a)
#ifdef kidw0124
constexpr bool ddebug = true;
#else
constexpr bool ddebug = false;
#endif
#define debug if constexpr(ddebug) cout << "[DEBUG] "
ll gcd(ll a, ll b) { return b ? gcd(b, a % b) : a; }
ll lcm(ll a, ll b)
{
    if (a && b)
        return a * (b / gcd(a, b));
    return a + b;
}
ll powm(ll a, ll b, ll rem)
{
    ll p = 1;
    for (; b; b /= 2, a = (a * a) % rem)
        if (b & 1)
            p = (p * a) % rem;
    return p;
}
pair<ll, ll> extended_gcd(ll a, ll b)
{
    if (b == 0)
        return {1, 0};
    auto t = extended_gcd(b, a % b);
    return {t.second, t.first - t.second * (a / b)};
}
ll modinverse(ll a, ll m)
{
    return (extended_gcd(a, m).first % m + m) % m;
}

struct Segtree{
    struct Node{
        ll minimum, maximum, ans=0;
    };
    ll n;
    vector<ll> data;
    vector<Node> tree;
    Segtree(ll n):n(n), data(n), tree(4*n) {}

    void seg_prop(ll idx){
        tree[idx].minimum
                =min(tree[idx<<1].minimum, tree[idx<<1|1].minimum);
        tree[idx].maximum
                =max(tree[idx<<1].maximum, tree[idx<<1|1].maximum);
        tree[idx].ans
                =max({tree[idx << 1].ans,
                      tree[idx << 1 | 1].ans,
                      tree[idx << 1 | 1].maximum - tree[idx << 1].minimum});
    }

    void seg_init(ll idx, ll s, ll e){
        if(s==e){
            tree[idx].minimum
                =tree[idx].maximum
                    =data[s];
            return;
        }
        ll mid=(s+e)>>1;
        seg_init(idx<<1, s, mid);
        seg_init(idx<<1|1, mid+1, e);
        seg_prop(idx);
    }

    void seg_update(ll idx, ll s, ll e, ll pos, ll val){
        if(pos<s || pos>e)return; // 완벽히 노드 범위를 벗어남
        if(s==e){
            tree[idx].minimum
                =tree[idx].maximum
                    =val;
            return;
        }
        ll mid=(s+e)>>1;
        seg_update(idx<<1, s, mid, pos, val);
        seg_update(idx<<1|1, mid+1, e, pos, val);
        seg_prop(idx);
    }

    Node seg_query(ll idx, ll s, ll e, ll l, ll r){
        if(l>e || r<s)return Node(1e18,-1e18,-1e18);
        if(l<=s && e<=r)return tree[idx]; // 완벽히 노드 범위에 포함됨
        ll mid=(s+e)>>1;
        Node left=seg_query(idx<<1, s, mid, l, r);
        Node right=seg_query(idx<<1|1, mid+1, e, l, r);
        Node ret;
        ret.minimum=min(left.minimum, right.minimum);
        ret.maximum=max(left.maximum, right.maximum);
        ret.ans=max({left.ans, right.ans,
                     right.maximum - left.minimum});
        return ret;
    }

    void init(const vector<ll>&arr){
        data=arr;
        seg_init(1, 0, n-1);
    }

    void update(ll pos, ll val){
        seg_update(1, 0, n-1, pos, val);
    }

    ll query(ll l, ll r){
        if(l>r)return 0;
        else return seg_query(1, 0, n-1, l, r).ans;
    }
};

void solve(ll testcase){
    ll i,j;
    ll n,q;
    cin>>n;
    vector<ll>arr(n);
    for(i=0;i<n;i++){
        cin>>arr[i];
    }
    Segtree seg(n);
    seg.init(arr);
    cin>>q;
    while(q--){
        ll t;
        cin>>t;
        if(t==1){
            ll x,y;
            cin>>x>>y;
            seg.update(x-1,y);
        }
        else{
            ll x,y;
            cin>>x>>y;
            cout<<seg.query(x-1,y-1)<<"\n";
        }
    }

}

void setup() {
    if(ddebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

int main() {
    setup();
    preprocess();
    ll t = 1;
//    cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}