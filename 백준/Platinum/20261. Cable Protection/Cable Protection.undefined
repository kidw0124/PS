#include<bits/stdc++.h>
#include<immintrin.h>
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
#ifdef kidw0124
constexpr bool ddebug = true;
#else
constexpr bool ddebug = false;
#endif
using ll = long long;
using pll = pair<ll,ll>;
#define debug if constexpr(ddebug) cout << "[DEBUG] "
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
using namespace __gnu_pbds;
ll mod_inverse(ll a, ll m) {
    ll m0 = m, t, q;
    ll x0 = 0, x1 = 1;
    if (m == 1) return 0;
    while (a > 1) {
        q = a / m;
        t = m;
        m = a % m, a = t;
        t = x0;
        x0 = x1 - q * x0;
        x1 = t;
    }
    if (x1 < 0) x1 += m0;
    return x1;
}

constexpr ll mod = 1e9 + 7;
constexpr ll inf = 1e18;

void solve(ll testcase){
    ll i,j;
    ll n,m;
    cin>>n>>m;
    vector<ll>par(n+m,-1);
    vector<vector<ll>>child(n+m);
    for(i=0;i<n+m;i++){
        ll x,y;
        cin>>x>>y;
        if(x>y)swap(x,y);
        if(y<n)continue;
        par[y]=x;
        child[x].push_back(y);
    }
    vector<bool>chk(n+m);
    auto dfs=[&](ll v, auto&& dfs)->void{
        if(child[v].empty()){
            if(par[v]!=-1)chk[par[v]]=1;
            return;
        }
        bool cc=1;
        for(auto x:child[v]){
            dfs(x, dfs);
            if(!chk[x])cc=0;
        }
        if(!cc){
            chk[v]=1;
        }
    };
    for(i=0;i<n;i++){
        dfs(i, dfs);
    }
    ll cnt=count(chk.begin(),chk.end(),1);
    ll idx=find(chk.begin(),chk.begin()+n,0)-chk.begin();
//    for(auto b:chk){
//        cout<<(b?"1 ":"0 ");
//    }
//    cout<<'\n';
//    cout<<cnt<<"\n";
    if(idx==n){
        cout<<cnt<<'\n';
    }
    else{
        idx=find(chk.begin(),chk.begin()+n,1)-chk.begin();
        rotate(chk.begin(), chk.begin()+idx, chk.begin()+n);
        for(i=0;i<n;i++){
            if(chk[i]) continue;
            j=i;
            while(j<n&&chk[j]==0)j++;
//            cout<<"i: "<<i<<" j: "<<j<<'\n';
            cnt+=(j-i)/2;
            i=j-1;
        }
        cout<<cnt<<'\n';
    }

}

void setup() {
    if(ddebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;
}

signed main() {
    setup();
    preprocess();
    ll t = 1;
    //cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}