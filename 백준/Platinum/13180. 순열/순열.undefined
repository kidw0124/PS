#include<bits/stdc++.h>
#include <immintrin.h>
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
#ifdef kidw0124
constexpr bool ddebug = true;
#else
constexpr bool ddebug = false;
#endif
using ll = long long;
#define debug if constexpr(ddebug) cout << "[DEBUG] "

ll mod_inverse(ll a, ll m) {
    ll m0 = m, t, q;
    ll x0 = 0, x1 = 1;
    if (m == 1) return 0;
    while (a > 1) {
        q = a / m;
        t = m;
        m = a % m, a = t;
        t = x0;
        x0 = x1 - q * x0;
        x1 = t;
    }
    if (x1 < 0) x1 += m0;
    return x1;
}

constexpr ll mod = 1e9 + 7;

void solve(ll testcase){
    ll i,j;
    ll n,m;
    cin>>n>>m;
    vector<ll>factorial(n+2,1),invfacto(n+2,1);
    for(i=1;i<=n+1;i++){
        factorial[i]=factorial[i-1]*i%mod;
    }
    invfacto[n+1]=mod_inverse(factorial[n+1],mod);
    for(i=n;i>=0;i--){
        invfacto[i]=invfacto[i+1]*(i+1);
        invfacto[i]%=mod;
    }
    auto ncr=[&](ll n, ll r)->ll{
        if(r>n||r<0)return 0;
        return factorial[n] * invfacto[r] % mod * invfacto[n-r] % mod;
    };
    ll ans=0;
    for(i=1;i<=n-m;i++){
        ans+=ncr(n+1,m+1+i)*factorial[m+i]%mod*factorial[n+1-m-i] % mod;
        ans %= mod;
    }
    cout<<ans<<'\n';


}

void setup() {
    if(ddebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

signed main() {
    setup();
    preprocess();
    ll t = 1;
//    cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}