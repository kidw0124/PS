#include <bits/stdc++.h>
#include <immintrin.h>
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
#ifdef kidw0124
constexpr bool ddebug = true;
#else
constexpr bool ddebug = false;
#endif
using ll = long long;
using pll = pair<ll, ll>;
#define debug \
  if constexpr (ddebug) cout << "[DEBUG] "
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using ld= long double;
using uint = unsigned int;
using ull = unsigned long long;
const ld eps=1e-12;

template <uint32_t mod> class Mint{
private:
    using  mint = Mint;

    static constexpr uint  get_r()  {
        uint  ret = mod;
        for(int i=0 ; i<4 ; ++i )  ret *= 2 - mod * ret;
        return  ret;
    }

    static constexpr uint  reduce( const ull &b )  {
        return ( b + ull( uint( b ) * uint( -r ) ) * mod ) >> 32;
    }

    // CLASS MEMBER DATA
    static constexpr uint  r  = get_r();
    static constexpr uint  n2 = -ull( mod ) % mod;
    uint                   a;

    static_assert( r * mod == 1, "invalid, r * mod != 1" );
    static_assert( mod < (1 << 30), "invalid, mod >= 2 ^ 30" );
    static_assert( (mod & 1) == 1, "invalid, mod % 2 == 0" );

public:
    constexpr Mint() : a( 0 ) {}
    constexpr Mint( ll b )
            : a( reduce( ull( b % mod + mod ) * n2 ) ) {};

    constexpr mint &operator += ( const mint &b )  {
        if( int( a += b.a - 2 * mod ) < 0 )   a += 2 * mod;
        return  *this;
    }

    constexpr mint &operator -= ( const mint &b )  {
        if( int( a -= b.a ) < 0 )   a += 2 * mod;
        return  *this;
    }

    constexpr mint &operator *= ( const mint &b )  {
        a = reduce( ull( a ) * b.a );
        return  *this;
    }

    constexpr mint &operator /= ( const mint &b )  {
        *this *= b.inverse();
        return  *this;
    }

    constexpr mint operator  + (const mint &b) const { return mint(*this) += b; }
    constexpr mint operator  - (const mint &b) const { return mint(*this) -= b; }
    constexpr mint operator  * (const mint &b) const { return mint(*this) *= b; }
    constexpr mint operator  / (const mint &b) const { return mint(*this) /= b; }
    constexpr bool operator == (const mint &b) const {
        return ( a >= mod ? a - mod : a ) == ( b.a >= mod ? b.a - mod : b.a );
    }
    constexpr bool operator != (const mint &b) const  {
        return ( a >= mod ? a - mod : a ) != ( b.a >= mod ? b.a - mod : b.a );
    }
    constexpr mint operator - () const {  return mint() - mint(*this); }
    mint& operator ++ ()  { return  *this += mint( 1 ); }
    mint& operator -- ()  { return  *this -= mint( 1 ); }
    mint  operator ++ (int)  { mint  ret( *this );  ++*this;  return  ret; }
    mint  operator -- (int)  { mint  ret( *this );  --*this;  return  ret; }

    constexpr mint  pow( ull n ) const  {
        mint  ret( 1 ), mul( *this );
        while( n > 0 )  { if( n & 1 )  ret *= mul;   mul *= mul;  n >>= 1; }
        return  ret;
    }

    constexpr mint  inverse() const { return  pow( mod - 2 ); }

    friend ostream &operator << ( ostream &os, const mint &b )  {
        return  os << b.get();
    }

    friend istream &operator >> ( istream &is, mint &b )  {
        int64_t  t;  is >> t;
        b = Mint<mod>( t );
        return  is;
    }

    constexpr uint  get() const  {
        uint  ret = reduce( a );
        return  ret >= mod ? ret - mod : ret;
    }

    static constexpr uint  get_mod()  { return mod; }
};
#pragma GCC target("avx2,bmi")
#include <immintrin.h>
#include <stdint.h>

#include <algorithm>
#include <cassert>
#include <iostream>

using u32 = uint32_t;
using u64 = uint64_t;

namespace simd {
    using i128 = __m128i;
    using i256 = __m256i;
    using u32x8 = u32 __attribute__((vector_size(32)));
    using u64x4 = u64 __attribute__((vector_size(32)));

    u32x8 load_u32x8(u32 *ptr) {
        return (u32x8)(_mm256_load_si256((i256 *)ptr));
    }
    u32x8 loadu_u32x8(u32 *ptr) {
        return (u32x8)(_mm256_loadu_si256((i256 *)ptr));
    }
    void store_u32x8(u32 *ptr, u32x8 val) {
        _mm256_store_si256((i256 *)ptr, (i256)(val));
    }
    void storeu_u32x8(u32 *ptr, u32x8 val) {
        _mm256_storeu_si256((i256 *)ptr, (i256)(val));
    }

    u32x8 set1_u32x8(u32 val) {
        return (u32x8)(_mm256_set1_epi32(val));
    }
    u64x4 set1_u64x4(u64 val) {
        return (u64x4)(_mm256_set1_epi64x(val));
    }

    u32x8 setr_u32x8(u32 a0, u32 a1, u32 a2, u32 a3, u32 a4, u32 a5, u32 a6, u32 a7) {
        return (u32x8)(_mm256_setr_epi32(a0, a1, a2, a3, a4, a5, a6, a7));
    }
    u64x4 setr_u64x4(u64 a0, u64 a1, u64 a2, u64 a3) {
        return (u64x4)(_mm256_setr_epi64x(a0, a1, a2, a3));
    }

    template <int imm8>
    u32x8 shuffle_u32x8(u32x8 val) {
        return (u32x8)(_mm256_shuffle_epi32((i256)(val), imm8));
    }
    u32x8 permute_u32x8(u32x8 val, u32x8 p) {
        return (u32x8)(_mm256_permutevar8x32_epi32((i256)(val), (i256)(p)));
    }

    template <int imm8>
    u32x8 permute_u32x8_epi128(u32x8 a, u32x8 b) {
        return (u32x8)(_mm256_permute2x128_si256((i256)(a), (i256)(b), imm8));
    }

    template <int imm8>
    u32x8 blend_u32x8(u32x8 a, u32x8 b) {
        return (u32x8)(_mm256_blend_epi32((i256)(a), (i256)(b), imm8));
    }

    template <int imm8>
    u32x8 shift_left_u32x8_epi128(u32x8 val) {
        return (u32x8)(_mm256_bslli_epi128((i256)(val), imm8));
    }
    template <int imm8>
    u32x8 shift_right_u32x8_epi128(u32x8 val) {
        return (u32x8)(_mm256_bsrli_epi128((i256)(val), imm8));
    }

    u32x8 shift_left_u32x8_epi64(u32x8 val, int imm8) {
        return (u32x8)(_mm256_slli_epi64((i256)(val), imm8));
    }
    u32x8 shift_right_u32x8_epi64(u32x8 val, int imm8) {
        return (u32x8)(_mm256_srli_epi64((i256)(val), imm8));
    }

    u32x8 min_u32x8(u32x8 a, u32x8 b) {
        return (u32x8)(_mm256_min_epu32((i256)(a), (i256)(b)));
    }
    u32x8 mul64_u32x8(u32x8 a, u32x8 b) {
        return (u32x8)(_mm256_mul_epu32((i256)(a), (i256)(b)));
    }

};  // namespace simd
using namespace simd;

// Montgomery32
struct Montgomery {
    u32 mod;
    u32 mod2;   // 2 * mod
    u32 n_inv;  // n_inv * mod == -1 (mod 2^32)
    u32 r;      // 2^32 % mod
    u32 r2;     // (2^32) ^ 2 % mod

    Montgomery() = default;
    Montgomery(u32 mod) : mod(mod) {
        assert(mod % 2);
        assert(mod < (1 << 30));
        n_inv = 1;
        for (int i = 0; i < 5; i++) {
            n_inv *= 2u + n_inv * mod;
        }
        assert(n_inv * mod == -1u);

        mod2 = 2 * mod;
        r = (1ULL << 32) % mod;
        r2 = r * u64(r) % mod;
    }

    u32 shrink(u32 val) const {
        return std::min(val, val - mod);
    }
    u32 shrink2(u32 val) const {
        return std::min(val, val - mod2);
    }
    u32 shrink_n(u32 val) const {
        return std::min(val, val + mod);
    }
    u32 shrink2_n(u32 val) const {
        return std::min(val, val + mod2);
    }

    // a * b should be in [0, 2**32 * mod)
    // result in [0, 2 * mod)   <false>
    // result in [0, mod)       <true>
    template <bool strict = false>
    u32 mul(u32 a, u32 b) const {
        u64 val = u64(a) * b;
        u32 res = (val + u32(val) * n_inv * u64(mod)) >> 32;
        if constexpr (strict)
            res = shrink(res);
        return res;
    }
};

// Montgomery32
struct Montgomery_simd {
    alignas(32) u32x8 mod;
    alignas(32) u32x8 mod2;   // 2 * mod
    alignas(32) u32x8 n_inv;  // n_inv * mod == -1 (mod 2^32)
    alignas(32) u32x8 r;      // 2^32 % mod
    alignas(32) u32x8 r2;     // (2^32) ^ 2 % mod

    Montgomery_simd() = default;
    Montgomery_simd(u32 md) {
        Montgomery mt(md);
        mod = set1_u32x8(mt.mod);
        mod2 = set1_u32x8(mt.mod2);
        n_inv = set1_u32x8(mt.n_inv);
        r = set1_u32x8(mt.r);
        r2 = set1_u32x8(mt.r2);
    }

    u32x8 shrink(u32x8 val) const {
        return min_u32x8(val, val - mod);
    }
    u32x8 shrink2(u32x8 val) const {
        return min_u32x8(val, val - mod2);
    }
    u32x8 shrink_n(u32x8 val) const {
        return min_u32x8(val, val + mod);
    }
    u32x8 shrink2_n(u32x8 val) const {
        return min_u32x8(val, val + mod2);
    }

    // a * b should be in [0, 2**32 * mod)
    // result in [0, 2 * mod)   <false>
    // result in [0, mod)       <true>
    template <bool strict = false>
    u32x8 mul(u32x8 a, u32x8 b) const {
        u32x8 x0246 = mul64_u32x8(a, b);
        u32x8 x1357 = mul64_u32x8(shift_right_u32x8_epi128<4>(a), shift_right_u32x8_epi128<4>(b));
        u32x8 x0246_ninv = mul64_u32x8(x0246, n_inv);
        u32x8 x1357_ninv = mul64_u32x8(x1357, n_inv);
        u32x8 res = blend_u32x8<0b10'10'10'10>(shift_right_u32x8_epi128<4>(u32x8((u64x4)x0246 + (u64x4)mul64_u32x8(x0246_ninv, mod))),
                                               u32x8((u64x4)x1357 + (u64x4)mul64_u32x8(x1357_ninv, mod)));
        if constexpr (strict)
            res = shrink(res);
        return res;
    }

    // a * b should be in [0, 2**32 * mod)
    // puts result in high 32-bit of each 64-bit word
    // result in [0, 2 * mod)   <false>
    // result in [0, mod)       <true>
    template <bool strict = false>
    u64x4 mul_to_hi(u64x4 a, u64x4 b) const {
        u32x8 val = mul64_u32x8((u32x8)a, (u32x8)b);
        u32x8 val_ninv = mul64_u32x8(val, n_inv);
        u32x8 res = u32x8(u64x4(val) + u64x4(mul64_u32x8(val_ninv, mod)));
        if constexpr (strict)
            res = shrink(res);
        return (u64x4)res;
    }

    // a * b should be in [0, 2**32 * mod)
    // result in [0, 2 * mod)   <false>
    // result in [0, mod)       <true>
    template <bool strict = false>
    u64x4 mul(u64x4 a, u64x4 b) const {
        return (u64x4)shift_right_u32x8_epi128<4>((u32x8)mul_to_hi<strict>(a, b));
    }
};
#include <array>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <vector>

// thanks https://judge.yosupo.jp/submission/142782
struct FFT {
    alignas(32) Montgomery_simd mts;
    Montgomery mt;
    u32 mod, g;

    [[gnu::noinline]] u32 power(u32 base, u32 exp) const {
        const auto mt = this->mt;  // ! to put Montgomery constants in registers
        u32 res = mt.r;
        for (; exp > 0; exp >>= 1) {
            if (exp & 1) {
                res = mt.mul(res, base);
            }
            base = mt.mul(base, base);
        }
        return mt.shrink(res);
    }

    // mod should be prime
    u32 find_pr_root(u32 mod) const {
        u32 m = mod - 1;
        std::vector<u32> vec;
        for (u32 i = 2; u64(i) * i <= m; i++) {
            if (m % i == 0) {
                vec.push_back(i);
                do {
                    m /= i;
                } while (m % i == 0);
            }
        }
        if (m != 1) {
            vec.push_back(m);
        }
        for (u32 i = 2;; i++) {
            if (std::all_of(vec.begin(), vec.end(), [&](u32 f) { return mt.r != power(mt.mul(i, mt.r2), (mod - 1) / f); })) {
                return i;
            }
        }
    }

    static constexpr int LG = 30;
    alignas(32) u32 w[4], w_r[4];
    alignas(32) u64x4 w_cum_x4[LG], w_rcum_x4[LG];
    alignas(32) u32x8 w_cum_x8[LG], w_rcum_x8[LG];

    FFT(u32 mod = 998'244'353) : mt(mod), mts(mod), mod(mod) {
        const auto mt = this->mt;  // ! to put Montgomery constants in registers

        g = mt.mul<true>(mt.r2, find_pr_root(mod));

        for (int i = 0; i < LG; i++) {
            u32 f = power(g, (mod - 1) >> i + 3);
            u32 res = mt.mul<true>(f, power(power(f, (1 << i + 1) - 2), mod - 2));
            u32 res_r = power(res, mod - 2);
            w_cum_x4[i] = setr_u64x4(res, power(res, 2), res, power(res, 3));
            w_rcum_x4[i] = setr_u64x4(res_r, power(res_r, 2), res_r, power(res_r, 3));
        }
        for (int i = 0; i < LG; i++) {
            u32 f = power(g, (mod - 1) >> i + 4);
            f = mt.mul<true>(f, power(power(f, (1 << i + 1) - 2), mod - 2));
            u32 f1 = f;
            u32 f2 = mt.mul<true>(f1, f1);
            u32 f4 = mt.mul<true>(f2, f2);
            w_cum_x8[i] = setr_u32x8(f, f2, f, f4, f, f2, f, f4);

            u32 f_r = power(f, mod - 2);
            w_rcum_x8[i][0] = mt.r;
            for (int j = 1; j < 8; j++) {
                w_rcum_x8[i][j] = mt.mul<true>(w_rcum_x8[i][j - 1], f_r);
            }
        }

        u32 w18 = power(g, (mod - 1) / 8);
        w[0] = mt.r, w[1] = power(w18, 2), w[2] = w18, w[3] = power(w18, 3);
        u32 w78 = power(w18, 7);  // == w18 ^ (-1)
        w_r[0] = mt.r, w_r[1] = power(w78, 2), w_r[2] = w78, w_r[3] = power(w78, 3);
    }

    // input data[i] in [0, 2 * mod)
    // output data[i] in [0, 4 * mod)
    [[gnu::noinline]] __attribute__((optimize("O3"))) void fft(int lg, u32 *data) const {
        const auto mt = this->mt;    // ! to put Montgomery constants in registers
        const auto mts = this->mts;  // ! to put Montgomery constants in registers

        int n = 1 << lg;
        int k = lg;

        if (lg % 2 == 0) {
            for (int i = 0; i < n / 2; i += 8) {
                u32x8 a = load_u32x8(data + i);
                u32x8 b = load_u32x8(data + n / 2 + i);

                store_u32x8(data + i, mts.shrink2(a + b));
                store_u32x8(data + n / 2 + i, mts.shrink2_n(a - b));
            }
            k--;
        }

        assert(k % 2 == 1);
        for (; k > 4; k -= 2) {
            u64x4 wj_cum = set1_u64x4(mt.r);
            u32x8 w_1 = set1_u32x8(w[1]);
            for (int i = 0; i < n; i += (1 << k)) {
                u32x8 w1 = shuffle_u32x8<0b00'00'00'00>((u32x8)wj_cum);
                u32x8 w2 = permute_u32x8((u32x8)wj_cum, set1_u32x8(2));
                u32x8 w3 = permute_u32x8((u32x8)wj_cum, set1_u32x8(6));
                wj_cum = mts.mul<true>(wj_cum, w_cum_x4[__builtin_ctz(~(i >> k))]);

                for (int j = 0; j < (1 << k - 2); j += 8) {
                    u32x8 a = load_u32x8(data + i + 0 * (1 << k - 2) + j);
                    u32x8 b = load_u32x8(data + i + 1 * (1 << k - 2) + j);
                    u32x8 c = load_u32x8(data + i + 2 * (1 << k - 2) + j);
                    u32x8 d = load_u32x8(data + i + 3 * (1 << k - 2) + j);

                    a = mts.shrink2(a);
                    b = mts.mul(b, w1), c = mts.mul(c, w2), d = mts.mul(d, w3);

                    u32x8 a1 = mts.shrink2(a + c), b1 = mts.shrink2(b + d),
                            c1 = mts.shrink2_n(a - c), d1 = mts.mul(b + mts.mod2 - d, w_1);

                    store_u32x8(data + i + 0 * (1 << k - 2) + j, a1 + b1);
                    store_u32x8(data + i + 1 * (1 << k - 2) + j, a1 + mts.mod2 - b1);
                    store_u32x8(data + i + 2 * (1 << k - 2) + j, c1 + d1);
                    store_u32x8(data + i + 3 * (1 << k - 2) + j, c1 + mts.mod2 - d1);
                }
            }
        }

        assert(k == 3);

        {
            // *  { w, w^2, w * w_1, w^4,  |  w * w_2, w^2 * w_1, w * w_3, w^4 }
            u32x8 cum = setr_u32x8(w[0], w[0], w[1], w[0], w[2], w[1], w[3], w[0]);

            int n_8 = n / 8;

            for (int i = 0; i < n_8; i++) {
                u32x8 vec = load_u32x8(data + i * 8);

                u32x8 wj0 = shuffle_u32x8<0b11'11'11'11>(cum);
                u32x8 wj1 = shuffle_u32x8<0b01'01'01'01>(cum);
                u32x8 wj2 = cum;  // no shuffle needed

                u32x8 bw;

                vec = mts.shrink2(vec);
                bw = permute_u32x8((u32x8)mts.mul_to_hi((u64x4)wj0, (u64x4)permute_u32x8(vec, setr_u32x8(4, -1, 5, -1, 6, -1, 7, -1))), setr_u32x8(1, 3, 5, 7, 1, 3, 5, 7));
                vec = permute_u32x8_epi128<0>(vec, vec) + blend_u32x8<0b11'11'00'00>(bw, mts.mod2 - bw);

                vec = mts.shrink2(vec);
                bw = shuffle_u32x8<0b11'01'11'01>((u32x8)mts.mul_to_hi((u64x4)wj1, (u64x4)shuffle_u32x8<0b00'11'00'10>(vec)));
                vec = shuffle_u32x8<0b01'00'01'00>(vec) + blend_u32x8<0b11'00'11'00>(bw, mts.mod2 - bw);

                vec = mts.shrink2(vec);
                bw = shuffle_u32x8<0b11'11'01'01>((u32x8)mts.mul_to_hi((u64x4)wj2, (u64x4)shuffle_u32x8<0b00'11'00'01>(vec)));
                vec = shuffle_u32x8<0b10'10'00'00>(vec) + blend_u32x8<0b10'10'10'10>(bw, mts.mod2 - bw);

                store_u32x8(data + i * 8, vec);

                cum = mts.mul(cum, w_cum_x8[__builtin_ctz(~i)]);
            }
        }
    }

    // input data[i] in [0, 2 * mod)
    // output data[i] in [0, mod)
    // fc (if specified) should be in [0, mod)
    // if fc is specified everything is multiplied by fc
    [[gnu::noinline]] __attribute__((optimize("O3"))) void ifft(int lg, u32 *data, u32 fc = -1u) const {
        const auto mt = this->mt;    // ! to put Montgomery constants in registers
        const auto mts = this->mts;  // ! to put Montgomery constants in registers

        if (fc == -1u) {
            fc = mt.r;
        }

        int n = 1 << lg;
        int k = 1;
        {
            u32x8 cum0 = setr_u32x8(w_r[0], w_r[0], w_r[0], w_r[0], w_r[0], w_r[0], w_r[1], w_r[1]);
            u32x8 cum1 = setr_u32x8(w_r[0], w_r[0], w_r[0], w_r[1], w_r[0], w_r[2], w_r[0], w_r[3]);

            const u32 inv_2 = mt.mul<true>(mt.r2, (mod + 1) / 2);
            u32x8 cum = set1_u32x8(mt.mul<true>(fc, power(inv_2, lg)));

            int n_8 = n / 8;
            for (int i = 0; i < n_8; i++) {
                u32x8 vec = load_u32x8(data + i * 8);

                vec = mts.mul(cum1, blend_u32x8<0b10'10'10'10>(vec, mts.mod2 - vec) + shuffle_u32x8<0b10'11'00'01>(vec));
                vec = mts.mul(cum0, blend_u32x8<0b11'00'11'00>(vec, mts.mod2 - vec) + shuffle_u32x8<0b01'00'11'10>(vec));
                vec = mts.mul(cum, blend_u32x8<0b11'11'00'00>(vec, mts.mod2 - vec) + permute_u32x8_epi128<1>(vec, vec));

                store_u32x8(data + i * 8, vec);

                cum = mts.mul<true>(cum, w_rcum_x8[__builtin_ctz(~i)]);
            }
            k += 3;
        }

        for (; k + 1 <= lg; k += 2) {
            u64x4 wj_cum = set1_u64x4(mt.r);
            u32x8 w_1 = set1_u32x8(w_r[1]);

            for (int i = 0; i < n; i += (1 << k + 1)) {
                u32x8 w1 = shuffle_u32x8<0b00'00'00'00>((u32x8)wj_cum);
                u32x8 w2 = permute_u32x8((u32x8)wj_cum, set1_u32x8(2));
                u32x8 w3 = permute_u32x8((u32x8)wj_cum, set1_u32x8(6));
                wj_cum = mts.mul<true>(wj_cum, w_rcum_x4[__builtin_ctz(~(i >> k + 1))]);

                for (int j = 0; j < (1 << k - 1); j += 8) {
                    u32x8 a = load_u32x8(data + i + 0 * (1 << k - 1) + j);
                    u32x8 b = load_u32x8(data + i + 1 * (1 << k - 1) + j);
                    u32x8 c = load_u32x8(data + i + 2 * (1 << k - 1) + j);
                    u32x8 d = load_u32x8(data + i + 3 * (1 << k - 1) + j);

                    u32x8 a1 = mts.shrink2(a + b), b1 = mts.shrink2_n(a - b),
                            c1 = mts.shrink2(c + d), d1 = mts.mul(c + mts.mod2 - d, w_1);

                    store_u32x8(data + i + 0 * (1 << k - 1) + j, mts.shrink2(a1 + c1));
                    store_u32x8(data + i + 1 * (1 << k - 1) + j, mts.mul(w1, b1 + d1));
                    store_u32x8(data + i + 2 * (1 << k - 1) + j, mts.mul(w2, a1 + mts.mod2 - c1));
                    store_u32x8(data + i + 3 * (1 << k - 1) + j, mts.mul(w3, b1 + mts.mod2 - d1));
                }
            }
        }
        if (k == lg) {
            for (int i = 0; i < n / 2; i += 8) {
                u32x8 a = load_u32x8(data + i);
                u32x8 b = load_u32x8(data + n / 2 + i);

                store_u32x8(data + i, mts.shrink(mts.shrink2(a + b)));
                store_u32x8(data + n / 2 + i, mts.shrink(mts.shrink2_n(a - b)));
            }
        } else {
            for (int i = 0; i < n; i += 8) {
                u32x8 ai = load_u32x8(data + i);
                store_u32x8(data + i, mts.shrink(ai));
            }
        }
    }

    __attribute__((optimize("O3"))) std::vector<u32> convolve_slow(std::vector<u32> a, std::vector<u32> b) const {
        int sz = std::max(0, (int)a.size() + (int)b.size() - 1);
        const auto mt = this->mt;  // ! to put Montgomery constants in registers

        std::vector<u32> c(sz);

        for (int i = 0; i < a.size(); i++) {
            for (int j = 0; j < b.size(); j++) {
                // c[i + j] = (c[i + j] + u64(a[i]) * b[j]) % mod;
                c[i + j] = mt.shrink(c[i + j] + mt.mul<true>(mt.r2, mt.mul(a[i], b[j])));
            }
        }

        return c;
    }

    // a and b should be 32-byte aligned
    // writes (a * b) to a
    __attribute__((optimize("O3"))) [[gnu::noinline]] void convolve(int lg, __restrict__ u32 *a, __restrict__ u32 *b) const {
        if (lg <= 4) {
            int n = (1 << lg);
            __restrict__ u32 *c = (u32 *)_mm_malloc(n * 4, 4);
            memset(c, 0, 4 * n);
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    c[(i + j) & (n - 1)] = mt.shrink2(c[(i + j) & (n - 1)] + mt.mul(a[i], b[j]));
                }
            }
            for (int i = 0; i < n; i++) {
                a[i] = mt.mul<true>(mt.r2, c[i]);
            }
            _mm_free(c);
            return;
        }

        fft(lg, a);
        fft(lg, b);

        const auto mts = this->mts;  // ! to put Montgomery constants in registers
        for (int i = 0; i < (1 << lg); i += 8) {
            u32x8 ai = load_u32x8(a + i), bi = load_u32x8(b + i);
            store_u32x8(a + i, mts.mul(mts.shrink2(ai), mts.shrink2(bi)));
        }

        ifft(lg, a, mt.r2);
    }
};

std::vector<int> solve(std::vector<int> a, std::vector<int> b) {
    int sz = std::max(0, (int)a.size() + (int)b.size() - 1);

    int lg = std::__lg(std::max(1, sz - 1)) + 1;
    u32 *ap = (u32 *)_mm_malloc(std::max(32, (1 << lg) * 4), 32);
    u32 *bp = (u32 *)_mm_malloc(std::max(32, (1 << lg) * 4), 32);

    std::copy(a.begin(), a.end(), ap);
    std::copy(b.begin(), b.end(), bp);
    memset(ap + a.size(), 0, ((1 << lg) - a.size()) * 4);
    memset(bp + b.size(), 0, ((1 << lg) - b.size()) * 4);

    FFT fft;
    fft.convolve(lg, ap, bp);

    std::vector<int> res(ap, ap + sz);
    _mm_free(ap);
    _mm_free(bp);

    return res;
}


const unsigned  mod  = 998244353;

void solve(ll testcase) {
    int i, j;
//    cout << "Case #" << testcase << '\n';
    ll h,q;
    cin>>h>>q;
    clock_t start = clock();
    ll s=h*(h+1)/2;
    ll b=s+1;
    ll o1=(h+1)/2;
    ll o2=(s-o1)/2;
    vector<ll>fact(s+1),invfact(s+1),inv(s+1);
    inv[0]=inv[1]=1;
    for(i=2;i<=s;i++){
        inv[i]=-((ll)mod/i)*inv[mod%i]%mod;
        if(inv[i]<0)inv[i]+=mod;
    }
    fact[0]=invfact[0]=1;
    for(i=1;i<=s;i++){
        fact[i]=fact[i-1]*i%mod;
        invfact[i]=invfact[i-1]*inv[i]%mod;
    }
//    for(i=0;i<=s;i++){
//        cout<<fact[i]<<" ";
//    }
//    cout<<'\n';
//    for(i=0;i<=s;i++){
//        cout<<invfact[i]<<" ";
//    }
//    cout<<'\n';

    vector invprod(s+1,vector<ll>(s+1,0));
    for(i=0;i<=s;i++){
        for(j=0;j<=s-i;j++){
            invprod[i][j]=invfact[i]*invfact[j]%mod;
        }
    }
    vector<int>fst(b*o1+1),sec(b*o2*2+1);
    for(i=0;i<=o1;i++){
        for(j=0;j<=o1-i;j++){
            int k=o1-i-j;
            fst[i*b+j]=fact[o1]*invprod[i][j]%mod*invfact[k]%mod;
        }
    }
    for(i=0;i<=o2;i++){
        for(j=0;j<=o2-i;j++){
            int k=o2-i-j;
            sec[(i*b+j)<<1]=fact[o2]*invprod[i][j]%mod*invfact[k]%mod;
        }
    }
    debug<<"Time taken for first part: "<<(clock()-start)/double(CLOCKS_PER_SEC)<<'\n';
    start = clock();
    auto ans=solve(fst,sec);
    for(auto&x:ans){
        x=x*3%mod;
    }
    debug<<"Time taken for multiplication: "<<(clock()-start)/double(CLOCKS_PER_SEC)<<'\n';
    start = clock();
//    debug<<"o1: "<<o1<<", o2: "<<o2<<", b: "<<b<<", s: "<<s<<'\n';
//    if(ddebug){
//        for(i=0;i<b;i++){
//            for(j=0;j<b;j++){
//                if(i+j>=b)cout<<"0 ";
//                else cout<<fst[i*b+j]<<" ";
//            }
//            cout<<'\n';
//        }
//    }

    o1=(h%3==1);
    ll o3=((h+1)/2*3-o1)/3;
    ll o6=(s-o3*3-o1)/6;
    fst=vector<int>(b*o3*3+1),sec=vector<int>(b*o6*6+1);
    for(i=0;i<=o3;i++){
        for(j=0;j<=o3-i;j++){
            int k=o3-i-j;
            fst[(i*b+j)*3]=fact[o3]*invprod[i][j]%mod*invfact[k]%mod;
        }
    }
    for(i=0;i<=o6;i++){
        for(j=0;j<=o6-i;j++){
            int k=o6-i-j;
            sec[(i*b+j)*6]=fact[o6]*invprod[i][j]%mod*invfact[k]%mod;
        }
    }
    debug<<"Time taken for second part: "<<(clock()-start)/double(CLOCKS_PER_SEC)<<'\n';
    start = clock();
    fst=solve(fst,sec);
    if(o1){
        vector<int>tmp(b+1);
        tmp[0]=tmp[1]=tmp[b]=1;
        fst=solve(fst,tmp);
    }
    for(auto&x:fst){
        x=x*2%mod;
    }
    debug<<"Time taken for multiplication: "<<(clock()-start)/double(CLOCKS_PER_SEC)<<'\n';
//    debug<<"o1: "<<o1<<", o3: "<<o3<<", o6: "<<o6<<", b: "<<b<<", s: "<<s<<'\n';
//    if(ddebug){
//        for(i=0;i<b;i++){
//            for(j=0;j<b;j++){
//                if(i+j>=b)cout<<"0 ";
//                else cout<<fst[i*b+j]<<" ";
//            }
//            cout<<'\n';
//        }
//    }

    while(q--){
        ll x,y,z;
        cin>>x>>y>>z;
        cout<<(ans[x*b+y]-fst[x*b+y]+mod)%mod<<'\n';
    }



}
void setup() {
    if (ddebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    } else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() { ll i, j, k; }

signed main() {
    setup();
    preprocess();
    ll t = 1;
//    cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++) {
        solve(testcase);
    }
    return 0;
}
