#include<bits/stdc++.h>
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using tlll = tuple<ll,ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
typedef unsigned long long ull;
typedef __float128 LD;
typedef __int128_t LL;
typedef __uint128_t ULL;
typedef pair<ll, ll> pii;
typedef vector<ll> vi;
typedef pair<ll, ll> pll;
typedef vector<ll> vl;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
using namespace __gnu_pbds;
template<typename T> using ordered_set
        = tree<T, null_type, less<>, rb_tree_tag,
        tree_order_statistics_node_update>;

template<typename T> using ordered_multiset
        = tree<T, null_type, less_equal<>, rb_tree_tag,
        tree_order_statistics_node_update>;
#pragma warning(disable : 4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
#define pb(x) push_back(x)
#define all(x) (x).begin(), (x).end()
#define rep(i, a, b) for (auto i = (a); i < (b); i++)
#define each(x, a) for (auto &x : a)
#ifdef kidw0124
constexpr bool ddebug = true;
#else
constexpr bool ddebug = false;
#endif
#define debug if constexpr(ddebug) cout << "[DEBUG] "
ll gcd(ll a, ll b) { return b ? gcd(b, a % b) : a; }
ll lcm(ll a, ll b)
{
    if (a && b)
        return a * (b / gcd(a, b));
    return a + b;
}
ll powm(ll a, ll b, ll rem)
{
    ll p = 1;
    for (; b; b /= 2, a = (a * a) % rem)
        if (b & 1)
            p = (p * a) % rem;
    return p;
}
pair<ll, ll> extended_gcd(ll a, ll b)
{
    if (b == 0)
        return {1, 0};
    auto t = extended_gcd(b, a % b);
    return {t.second, t.first - t.second * (a / b)};
}
ll modinverse(ll a, ll m)
{
    return (extended_gcd(a, m).first % m + m) % m;
}

struct chash{
    size_t operator()(const pll& _x) const{
        auto [x,y]=_x;
        size_t hx=hash<ll>()(x);
        size_t hy=hash<ll>()(y);
        return ((hx<<22)|(hx>>22))^hy;
    }
    size_t operator()(const tuple<ll,string,ll>& _x) const{
        auto [x,y,z]=_x;
        size_t hx=hash<ll>()(x);
        size_t hy=hash<string>()(y);
        size_t hz=hash<ll>()(z);
        return ((hx<<22)|(hx>>22))^((hy<<17)|(hy>>17))^hz;
    }
};


void solve(ll testcase){
    ll i,j,k;
    ll n,m,s;
    ld r,h;
    ld tot=0;
    ld chk=0;
    cin>>r>>h;
    cin>>n;
    vector<ld>arr(n),brr(n);
    auto getint=[&](ld x){
        if(r*r-x*x<0) {
            debug << "Invalid x: " << x << endl;
        }
        ld s=sqrt(r*r-x*x+1e-9);
        debug<<x<<" "<<x/sqrt(r*r-x*x+1e-9)<<" " << atan2(x,sqrt(r*r-x*x+1e-9))<<" "<<(x*s + r*r*atan2(x,s)) << endl;
        return(x*s + r*r*atan2(x,s));
    };
    auto get_int_s=[&](ld s,ld e){
        return (getint(e) - getint(s));
    };
    for(i=0;i<n;i++){
        cin>>arr[i];
        if(i)arr[i]+=arr[i-1];
        else arr[i]-=r;
    }
    for(i=0;i<n;i++){
        cin>>brr[i];
        chk+=get_int_s(arr[i],i?arr[i-1]:-r);
        tot+=get_int_s(arr[i],i?arr[i-1]:-r)*brr[i];
    }
    tot=-tot;
    auto calc=[&](ld x){
        ld ret=get_int_s(x,-x)*h;
        ret*=ret;
        auto it=lower_bound(arr.begin(),arr.end(),x);
        ll idx=it-arr.begin();
        ld tmp=0;
        for(int i=0;i<=idx;i++){
            tmp+=get_int_s(arr[i],i?arr[i-1]:-r)*brr[i];
        }
        tmp+=get_int_s(x,arr[idx])*brr[idx];
        tmp=-tmp;
        debug << "x: " << x << " tmp: " << tmp << " tot: " << tot << endl;
        ret+=(tot-2*tmp)*(tot-2*tmp);
//        debug << "x: " << x << " ret: " << ret << endl;
        return ret;
    };
    debug << "chk: " << chk << endl;
    debug << "tot: " << tot << endl;
    calc(0.5);
    calc(0);
    calc(-0.324242);
    ld st=-r, en=r;
    while(st+1e-8<en) {
        ld mid1= (st + en) / 2;
        ld mid2= (st + en) / 2 + 1e-9;
        ld val1 = calc(mid1);
        ld val2 = calc(mid2);
        if (val1 < val2) {
            en = mid2;
        } else {
            st = mid1;
        }
    }
    debug << "st: " << st << " en: " << en << endl;
    cout << fixed << setprecision(10) << calc(st) << endl;


}

void setup() {
    if(ddebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

int main() {
    setup();
    preprocess();
    ll t = 1;
//    cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}