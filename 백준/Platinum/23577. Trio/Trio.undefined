#include<bits/stdc++.h>
#include <immintrin.h>
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using tlll = tuple<ll,ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
typedef unsigned long long ull;
typedef __float128 LD;
typedef __int128_t LL;
typedef __uint128_t ULL;
typedef pair<ll, ll> pii;
typedef vector<ll> vi;
typedef pair<ll, ll> pll;
typedef vector<ll> vl;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
using namespace __gnu_pbds;
template<typename T> using ordered_set
        = tree<T, null_type, less<>, rb_tree_tag,
        tree_order_statistics_node_update>;

template<typename T> using ordered_multiset
        = tree<T, null_type, less_equal<>, rb_tree_tag,
        tree_order_statistics_node_update>;
#pragma warning(disable : 4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
#define pb(x) push_back(x)
#define all(x) (x).begin(), (x).end()
#define rep(i, a, b) for (auto i = (a); i < (b); i++)
#define each(x, a) for (auto &x : a)
#ifdef kidw0124
constexpr bool ddebug = true;
#else
constexpr bool ddebug = false;
#endif
#define debug if constexpr(ddebug) cout << "[DEBUG] "
ll gcd(ll a, ll b) { return b ? gcd(b, a % b) : a; }
ll lcm(ll a, ll b)
{
    if (a && b)
        return a * (b / gcd(a, b));
    return a + b;
}
ll powm(ll a, ll b, ll rem)
{
    ll p = 1;
    for (; b; b /= 2, a = (a * a) % rem)
        if (b & 1)
            p = (p * a) % rem;
    return p;
}
pair<ll, ll> extended_gcd(ll a, ll b)
{
    if (b == 0)
        return {1, 0};
    auto t = extended_gcd(b, a % b);
    return {t.second, t.first - t.second * (a / b)};
}
ll modinverse(ll a, ll m)
{
    return (extended_gcd(a, m).first % m + m) % m;
}

alignas(16) short chk[2'000][2'000],p[16];

void solve(ll testcase){
    int i,j,k;
    ll n,m;
    cin>>n;
    vector<string>arr(n);
    for(i=0;i<n;i++)cin>>arr[i];
    for(i=0;i<n;i++){
        for(j=0;j<i;j++){
            for(k=0;k<4;k++)chk[i][j]|=(arr[i][k]==arr[j][k])<<k;
        }
    }
    int ans=0;
    for(i=0;i<n;i++){
        for(j=0;j<i;j++){
            short mask=chk[i][j];
            int r=j;
            while(r&15)ans+=(mask==chk[i][--r])&&(mask==chk[j][r]);
            __m256i masks=_mm256_set1_epi16(mask);
            __m256i cnts=_mm256_setzero_si256();
            for(k=0;k<r;k+=16){
                __m256i cmpi=_mm256_loadu_si256((__m256i*)&chk[i][k]);
                __m256i cmpj=_mm256_loadu_si256((__m256i*)&chk[j][k]);
                cmpi=_mm256_cmpeq_epi16(cmpi, masks);
                cmpj=_mm256_cmpeq_epi16(cmpj, masks);
                __m256i res=_mm256_and_si256(cmpi, cmpj);
                cnts=_mm256_sub_epi16(cnts, res);
            }
            _mm256_storeu_si256((__m256i*)p, cnts);
            for(int l=0;l<16;l++)ans+=p[l];
        }
    }
    cout<<ans;

}

void setup() {
    if(ddebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

int main() {
    setup();
    preprocess();
    ll t = 1;
//    cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}