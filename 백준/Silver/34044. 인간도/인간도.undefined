#include <bits/stdc++.h>
#include <immintrin.h>
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
#ifdef kidw0124
constexpr bool ddebug = true;
#else
constexpr bool ddebug = false;
#endif
using ll = long long;
using pll = pair<ll, ll>;
#define debug \
  if constexpr (ddebug) cout << "[DEBUG] "
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
 
void solve(ll testcase) {
  ll i, j;
  ll n;
  cin >> n;
  if (n == 1)
    cout << -1, n = 0;
  else if (n & 1) {
    n -= 3;
    cout << 976789;
  }
  while (n) {
    n -= 2;
    cout << 2937;
  }
  cout << "\n";
  // vector primes({13, 17, 19, 23, 29, 31, 37, 41, 43, 47,
  //                53, 59, 61, 67, 71, 73, 79, 83, 89, 97});
  // vector<vector<ll>> mod11(11);
  // for (auto k : primes) {
  //   ll t = (k / 10 - k % 10) % 11;
  //   if (t < 0) t += 11;
  //   mod11[t].push_back(k);
  // }
  // //    ll tmp = 0,cnt=0;
  // //    for (i = 1; i < 11; i++) {
  // //        cout << i << ": " << mod11[i].size() << "\n";
  // //        tmp += i*mod11[i].size();
  // //        cnt += mod11[i].size();
  // //    }
  // //    cout<<"cnt : "<<cnt<<", sum : "<<tmp%11<<" mod 11\n";
  // /*
  // 1: 1
  // 2: 3
  // 3: 2
  // 4: 2
  // 5: 3
  // 6: 1
  // 7: 2
  // 8: 1
  // 9: 2
  // 10: 3
  // cnt : 20, sum : 2 mod 11
  //  min(1,10)+... => (1+2+1+2+1)*2=14
  //  rem : 2,3,5,5,10,10 => (2,10,10)
  // 19 -> 2
  // 18 -> 3+10
  // 17 -> 3+5+5
  // 16 -> 2+3+5+5
  // */
  // if (n >= 20)
  //   cout << "-1\n";
  // else if (n <= 15) {
  //   if (n % 2 == 0) {
  //     ll rem = n / 2;
  //     for (i = 1; i <= 5; i++) {
  //       if (min(mod11[i].size(), mod11[11 - i].size()) <= rem) {
  //         for (j = 0; j < min(mod11[i].size(), mod11[11 - i].size()); j++) {
  //           cout << mod11[i][j] << mod11[11 - i][j];
  //         }
  //         rem -= min(mod11[i].size(), mod11[11 - i].size());
  //       } else {
  //         for (j = 0; j < rem; j++) {
  //           cout << mod11[i][j] << mod11[11 - i][j];
  //         }
  //         rem = 0;
  //       }
  //     }
  //   } else if (n == 1)
  //     cout << "-1\n";
  //   else {
  //     ll rem = n / 2 - 1;
  //     cout << mod11[2][2] << mod11[10][1] << mod11[10][2];
  //     for (i = 1; i <= 5; i++) {
  //       if (min(mod11[i].size(), mod11[11 - i].size()) <= rem) {
  //         for (j = 0; j < min(mod11[i].size(), mod11[11 - i].size()); j++) {
  //           cout << mod11[i][j] << mod11[11 - i][j];
  //         }
  //         rem -= min(mod11[i].size(), mod11[11 - i].size());
  //       } else {
  //         for (j = 0; j < rem; j++) {
  //           cout << mod11[i][j] << mod11[11 - i][j];
  //         }
  //         rem = 0;
  //       }
  //     }
  //   }
  // } else {
  //   if (n == 19)
  //     mod11[2].pop_back();
  //   else if (n == 18)
  //     mod11[3].pop_back(), mod11[10].pop_back();
  //   else if (n == 17)
  //     mod11[3].pop_back(), mod11[5].pop_back(), mod11[5].pop_back();
  //   else if (n == 16)
  //     mod11[2].pop_back(), mod11[3].pop_back(), mod11[5].pop_back(),
  //         mod11[5].pop_back();
  //   for (auto& v : mod11)
  //     for (auto& k : v) cout << k;
  // }
  // cout << "\n";
}
 
void setup() {
  if (ddebug) {
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
  } else {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
  }
}
 
void preprocess() { ll i, j, k; }
 
signed main() {
  setup();
  preprocess();
  ll t = 1;
  //  cin >> t;
  for (ll testcase = 1; testcase <= t; testcase++) {
    solve(testcase);
    cout << "\n";
  }
  return 0;
}
