
#include<bits/stdc++.h>
#include <immintrin.h>
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
#ifdef kidw0124
constexpr bool ddebug = true;
#else
constexpr bool ddebug = false;
#endif
#define debug if constexpr(ddebug) cout << "[DEBUG] "
alignas(32) int xrr[2000],yrr[2000],tmp[8];

void solve(int testcase){
    int i,j,k;
    int n,m;
    cin>>n;
    if(!n)return;
    for(i=0;i<n;i++){
        cin>>xrr[i]>>yrr[i];
    }
    int mini=1e9, maxi=0;
    for(i=0;i<n;i++){
        for(j=0;j<i;j++){
            // xiyj-xjyi+xjyk-xiyk+xkyi-xkyj=xiyj-xjyi+(xj-xi)yk+(yi-yj)xk
            int xd=xrr[j]-xrr[i], yd=yrr[i]-yrr[j];
            int offset=xrr[i]*yrr[j]-xrr[j]*yrr[i];
            int r=j;
            while(r&7){
                --r;
                int area=abs(offset+xd*yrr[r]+yd*xrr[r]);
                debug<<"i="<<i<<" j="<<j<<" r="<<r<<" area="<<area<<" xd="<<xd<<" yd="<<yd<<" offset="<<offset<<'\n';
                mini=min(mini, area),maxi=max(maxi, area);
            }
            k=0;
            __m256i xds= _mm256_set1_epi32(xd),
                    yds= _mm256_set1_epi32(yd),
                    maxis=_mm256_set1_epi32(maxi),
                    minis=_mm256_set1_epi32(mini),
                    offsets=_mm256_set1_epi32(offset);
            while(k<r){
                __m256i xrrs = _mm256_loadu_si256((__m256i*)(xrr+k)),
                        yrrs = _mm256_loadu_si256((__m256i*)(yrr+k));
                xrrs=_mm256_mullo_epi32(xrrs, yds);
                yrrs=_mm256_mullo_epi32(yrrs, xds);
                xrrs=_mm256_add_epi32(xrrs, yrrs);
                xrrs=_mm256_add_epi32(xrrs, offsets);
                xrrs=_mm256_abs_epi32(xrrs);
                maxis=_mm256_max_epi32(maxis, xrrs);
                minis=_mm256_min_epi32(minis, xrrs);
                k+=8;
            }
            _mm256_store_si256((__m256i*)tmp, maxis);
            for(k=0;k<8;k++){
                maxi=max(maxi, tmp[k]);
            }
            _mm256_store_si256((__m256i*)tmp, minis);
            for(k=0;k<8;k++){
                mini=min(mini, tmp[k]);
            }
        }
    }
    cout<<fixed<<setprecision(1)<<mini/2.0<<" "<<maxi/2.0<<'\n';
    solve(testcase+1);
}

void setup() {
    if(ddebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    int i, j, k;

}

signed main() {
    setup();
    preprocess();
    int t = 1;
//    cin >> t;
    for (int testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}