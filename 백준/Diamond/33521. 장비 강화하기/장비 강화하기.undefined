#include<bits/stdc++.h>
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
typedef unsigned long long ull;
typedef __float128 LD;
typedef __int128_t LL;
typedef __uint128_t ULL;
typedef pair<ll, ll> pii;
typedef vector<ll> vi;
typedef pair<ll, ll> pll;
typedef vector<ll> vl;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
using namespace __gnu_pbds;
#pragma warning(disable : 4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
#define pb(x) push_back(x)
#define all(x) (x).begin(), (x).end()
#define rep(i, a, b) for (auto i = (a); i < (b); i++)
#define each(x, a) for (auto &x : a)
#ifdef kidw0124
constexpr bool ddebug = true;
#else
constexpr bool ddebug = false;
#endif
#define debug if constexpr(ddebug) cout << "[DEBUG] "

struct pst {
    struct node {
        ll cnt, sum;
        int l, r;
    };
    vector<node> tree;
    vector<int> roots;
    int n, cnt;
    pst(int n, int m) : n(n), cnt(1) {
        tree.resize(m * 20);
        tree[0].cnt = tree[0].sum = 0;
        tree[0].l = tree[0].r = 0;
        roots.push_back(0);
    }
    pst(int n) : pst(n+1, n+1) {}
    inline int upd_iter(int prev, int pos, ll cval, ll sval) {
        int new_root = cnt++;
        tree[new_root] = tree[prev];
        int cur_new = new_root, cur_old = prev;
        int l = 1, r = n;
        int path[64], depth = 0;
        while(l < r) {
            int mid = (l + r) >> 1;
            path[depth++] = cur_new;
            if(pos <= mid) {
                int new_child = cnt++;
                tree[new_child] = tree[tree[cur_old].l];
                tree[cur_new].l = new_child;
                cur_new = new_child;
                cur_old = tree[cur_old].l;
                r = mid;
            } else {
                int new_child = cnt++;
                tree[new_child] = tree[tree[cur_old].r];
                tree[cur_new].r = new_child;
                cur_new = new_child;
                cur_old = tree[cur_old].r;
                l = mid + 1;
            }
        }
        tree[cur_new].cnt += cval;
        tree[cur_new].sum += sval;
        while(depth--) {
            int node = path[depth];
            int left = tree[node].l, right = tree[node].r;
            tree[node].cnt = tree[left].cnt + tree[right].cnt;
            tree[node].sum = tree[left].sum + tree[right].sum;
        }
        return new_root;
    }
    inline void update(int pos, ll cval, ll sval) {
        roots.push_back(upd_iter(roots.back(), pos, cval, sval));
    }
    inline pair<ll,ll> queryPrefixBoth(int pos, int ver) const {
        if(pos <= 0) return {0,0};
        int idx = roots[ver], s = 1, e = n;
        ll resCnt = 0, resSum = 0;
        while(s < e) {
            int mid = (s + e) >> 1;
            if(pos > mid) {
                resCnt += tree[tree[idx].l].cnt;
                resSum += tree[tree[idx].l].sum;
                idx = tree[idx].r;
                s = mid + 1;
            } else {
                idx = tree[idx].l;
                e = mid;
            }
        }
        if(s <= pos) {
            resCnt += tree[idx].cnt;
            resSum += tree[idx].sum;
        }
        return {resCnt, resSum};
    }
    inline int kth_iter(int ver, int k) const {
        int idx = roots[ver], s = 1, e = n;
        while(s < e) {
            int mid = (s + e) >> 1;
            int leftCount = tree[tree[idx].l].cnt;
            if(k <= leftCount) {
                idx = tree[idx].l;
                e = mid;
            } else {
                k -= leftCount;
                idx = tree[idx].r;
                s = mid + 1;
            }
        }
        return s;
    }
    inline int kth(int ver, int k) const {
        return kth_iter(ver, k);
    }
    inline int getCountUnder(int ver, ll T) const {
        int idx = roots[ver], s = 1, e = n;
        int cnt_res = 0;
        while(s < e) {
            int mid = (s + e) >> 1;
            int left = tree[idx].l;
            if(tree[left].sum <= T) {
                cnt_res += tree[left].cnt;
                T -= tree[left].sum;
                idx = tree[idx].r;
                s = mid + 1;
            } else {
                idx = left;
                e = mid;
            }
        }
        if(tree[idx].sum <= T) cnt_res += tree[idx].cnt;
        return cnt_res;
    }
};

void solve(ll testcase){
    int n, q;
    cin >> n;
    vector<pll> arr(n);
    vector<ll> suma(n + 1, 0), sumb(n + 1, 0);
    vector<ll> bis;
    bis.reserve(n);
    for (int i = 0; i < n; i++){
        cin >> arr[i].first >> arr[i].second;
        bis.push_back(arr[i].second);
    }
    sort(arr.begin(), arr.end());
    sort(bis.begin(), bis.end());
    vector<int> occ(n, 0);
    for (int i = 0; i < n; i++){
        suma[i+1] = suma[i] + arr[i].first;
        sumb[i+1] = sumb[i] + arr[i].second;
    }
    pst tree(n);
    for (int i = 0; i < n; i++){
        ll bi = arr[i].second;
        int pos = int(lower_bound(bis.begin(), bis.end(), bi) - bis.begin());
        int id = pos + occ[pos]++ + 1;
        tree.update(id, 1, bi);
    }
    cin >> q;
    for (int qi = 0; qi < q; qi++){
        ll x, y;
        cin >> x >> y;
        int l = 0, r = n;
        while(l < r){
            int m = (l + r + 1) >> 1;
            if(suma[m] > x) {
                r = m - 1;
            } else if(sumb[m] <= y) {
                l = m;
            } else {
                ll rem = x - suma[m];
                ll need = sumb[m] - y;
                auto pr = tree.queryPrefixBoth(n, m);
                ll tot = pr.first, sn = pr.second;
                int kept = tree.getCountUnder(m, sn - need);
                int removals = tot - kept;
                if(rem >= removals)
                    l = m;
                else
                    r = m - 1;
            }
        }
        cout << l << "\n";
    }
}

void setup() {
    if(ddebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

int main() {
    setup();
    preprocess();
    ll t = 1;
//    cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}