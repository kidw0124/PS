#include <bits/stdc++.h>
#include <immintrin.h>
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
#ifdef kidw0124
constexpr bool ddebug = true;
#else
constexpr bool ddebug = false;
#endif
using ll = long long;
using pll = pair<ll, ll>;
#define debug \
  if constexpr (ddebug) cout << "[DEBUG] "
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using ld= long double;
const ll mod=1e9+7;

ll powm(ll a, ll b, ll m = mod) {
    ll res = 1;
    a %= m;
    while (b > 0) {
        if (b & 1) res = (res * a) % m;
        a = (a * a) % m;
        b >>= 1;
    }
    return res;
}

ll modinverse(ll a, ll m) {
    ll m0 = m, t, q;
    ll x0 = 0, x1 = 1;
    if (m == 1) return 0;
    while (a > 1) {
        q = a / m;
        t = m;
        m = a % m, a = t;
        t = x0;
        x0 = x1 - q * x0;
        x1 = t;
    }
    if (x1 < 0) x1 += m0;
    return x1;
}

const ld eps=1e-12;

void solve(ll testcase) {
    ll i, j;
    ll n,q,m;
    cin>>n>>q>>m;
    map<ll,ll>rarr;
    rarr[0]=0;
    for(i=0;i<q;i++){
        ll x,y;
        cin>>x>>y;
        if(rarr.count(y))rarr[y]=min(rarr[y],x);
        else rarr[y]=x;
    }
    vector<pll>arr;
    for(auto&[y,x]:rarr){
        arr.push_back({x,y});
    }
    sort(arr.begin(),arr.end());
    q=arr.size();
    vector dp(q,vector(m+1,0ll));
    dp[0][0]=1;
    for(i=1;i<q;i++){
        ll sum=0;
        for(j=1;j<=m;j++){
            dp[i][j]=(dp[i][j-1]
                    +dp[i-1][j-1]*powm(j-1,arr[i].second-arr[i-1].second-1)%mod
                    +sum*powm(j-1,arr[i].second-arr[i].first-1)%mod*(powm(j-1,arr[i].first-arr[i-1].second)-powm(j-2,arr[i].first-arr[i-1].second))%mod)
                            %mod;
            sum=(sum+dp[i-1][j-1])%mod;
        }
    }
    ll ans=0;
    for(auto x:dp[q-1]){
        ans=(ans+x)%mod;
    }
    if(ans<0) ans+=mod;
    ans=powm(m,n-arr[q-1].second)*ans%mod;
    cout << ans << "\n";
    return;
}

void setup() {
    if (ddebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    } else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() { ll i, j, k; }

signed main() {
    setup();
    preprocess();
    ll t = 1;
//    cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++) {
        solve(testcase);
    }
    return 0;
}
