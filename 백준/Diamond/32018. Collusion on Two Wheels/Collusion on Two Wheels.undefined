#include <bits/stdc++.h>
#include <immintrin.h>
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
#ifdef kidw0124
constexpr bool ddebug = true;
#else
constexpr bool ddebug = false;
#endif
using ll = long long;
using pll = pair<ll, ll>;
#define debug \
  if constexpr (ddebug) cout << "[DEBUG] "
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

constexpr ll mod=1e9+7;
ll modinverse(ll a, ll m) {
    ll m0 = m, t, q;
    ll x0 = 0, x1 = 1;
    if (m == 1) return 0;
    while (a > 1) {
        q = a / m;
        t = m;
        m = a % m, a = t;
        t = x0;
        x0 = x1 - q * x0;
        x1 = t;
    }
    if (x1 < 0) x1 += m0;
    return x1;
}
ll modpow(ll a, ll b, ll m) {
    ll res = 1;
    a %= m;
    while (b > 0) {
        if (b & 1) res = (res * a) % m;
        a = (a * a) % m;
        b >>= 1;
    }
    return res;
}
template <ll mod=mod>
struct mint{
    ll x;
    mint(ll x=0):x((x%mod+mod)%mod){}
    mint operator-() const { return mint(-x);}
    mint& operator+=(const mint a) {
        if((x += a.x) >= mod) x -= mod;
        return *this;
    }
    mint& operator-=(const mint a) {
        if((x += mod-a.x) >= mod) x -= mod;
        return *this;
    }
    mint& operator*=(const mint a) {
        (x *= a.x) %= mod;
        return *this;
    }
    mint& operator/=(const mint a) {
        return (*this) *= a.inv();
    }
    mint operator+(const mint a) const {
        mint res(*this);
        return res+=a;
    }
    mint operator-(const mint a) const {
        mint res(*this);
        return res-=a;
    }
    mint operator*(const mint a) const {
        mint res(*this);
        return res*=a;
    }
    mint operator/(const mint a) const {
        mint res(*this);
        return res/=a;
    }
    mint inv() const {
        return modinverse(x, mod);
    }
    friend ostream& operator<<(ostream& os, const mint& a) {
        return os << a.x;
    }
    friend istream& operator>>(istream& is, mint& a) {
        ll t;
        is >> t;
        a = mint<mod>(t);
        return is;
    }
    explicit operator ll() const { return x; }
    explicit operator int() const { return x; }
    explicit operator bool() const { return x; }
    explicit operator double() const { return x; }
    explicit operator string() const { return to_string(x); }
};
constexpr int INF=1e9;
void solve(ll testcase) {
    ll i,j;
    ll n;
    cin>>n;
    vector<pll>arr(n);
    for(auto&[x,y]:arr) {
        cin>>x>>y;
        tie(x,y)=pair{x+y, x-y};
    }
    ll st=0,en=2000;

    auto dist=[](const pll&a,const pll&b){
        return max(abs(a.first-b.first),abs(a.second-b.second));
    };

    auto chk=[&](ll c){
        multiset<pll>vct;
        ll cnt=0;
        ll idx=upper_bound(arr.begin(),arr.end(),pair{arr[0].first+c,5001ll})-arr.begin();
        debug << "idx: " << idx << "\n";
        sort(arr.begin(),arr.begin()+idx,[](const auto&a,const auto&b){
            return a.second < b.second;
        });
        ll idx2=0;
        while(idx2<idx && arr[idx2].second<=arr[0].second+c)idx2++;
        for(i=idx2;i<n;i++){
            for(auto &v:vct){
                if(dist(arr[i],v)>c)cnt++;
            }
            vct.insert(arr[i]);
        }
        for(i=0;i<idx;i++){
            while(idx2<idx&&arr[idx2].second<=arr[i].second+c){
                vct.erase(vct.find(arr[idx2]));
                for(auto &v:vct){
                    if(dist(arr[idx2],v)>c)cnt--;
                }
                idx2++;
            }
            if(cnt==0)return true;
            for(auto &v:vct){
                if(dist(arr[i],v)>c)cnt++;
            }
            vct.insert(arr[i]);
        }
        if(cnt==0)return true;
        return false;
    };

    while(st<en){
        sort(arr.begin(),arr.end());
        ll mid=(st+en)>>1;
        if(chk(mid))en=mid;
        else st=mid+1;
    }
    cout<<st<<"\n";

}

void setup() {
    if (ddebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    } else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() { ll i, j, k; }

signed main() {
    setup();
    preprocess();
    ll t = 1;
//    cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++) {
        solve(testcase);
    }
    return 0;
}
