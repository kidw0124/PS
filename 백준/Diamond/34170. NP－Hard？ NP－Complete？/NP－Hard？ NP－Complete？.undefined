#include <bits/stdc++.h>
#include <immintrin.h>
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
#ifdef kidw0124
constexpr bool ddebug = true;
#else
constexpr bool ddebug = false;
#endif
using ll = long long;
using pll = pair<ll, ll>;
#define debug \
  if constexpr (ddebug) cout << "[DEBUG] "
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using ld= long double;
const ll mod=1e9+7;
ll modinverse(ll a, ll m) {
    ll m0 = m, t, q;
    ll x0 = 0, x1 = 1;
    if (m == 1) return 0;
    while (a > 1) {
        q = a / m;
        t = m;
        m = a % m, a = t;
        t = x0;
        x0 = x1 - q * x0;
        x1 = t;
    }
    if (x1 < 0) x1 += m0;
    return x1;
}

const ld eps=1e-12;

void solve(ll testcase) {
    ll i, j;
    ll n,k,p;
    cin>>n>>p>>k;
    ll _n=n;
    auto naive=[&](){
        ll vp=0;
        ll ret=(vp>=k);
        for(ll i=0;i<n;i++){
            ll u=n-i;
            while(u%p==0){
                vp++;
                u/=p;
            }
            u=i+1;
            while(u%p==0){
                vp--;
                u/=p;
            }
            if(vp>=k) ret++;
        }
        return ret;
    };
//    debug<<"Naive: "<<naive()<<" Result: ";
    vector<ll>ntop;
    while(_n){
        ntop.push_back(_n%p);
        _n/=p;
    }
    ll d=ntop.size();
    if(d<k){
        cout<<0<<"\n";
        return;
    }
    else{
        vector dp(d+1,vector(k+1,vector(2,0ll)));
        dp[0][0][0]=1;
        for(i=0;i<d;i++){
            for(j=0;j<=k;j++){
                for(ll l=0;l<2;l++){
                    if(dp[i][j][l]==0) continue;
                    ll cnt0=max(0ll,min(ntop[i]-l,p-1)+1);
                    ll cnt1=p-cnt0;
                    dp[i+1][j][0]+=dp[i][j][l]*cnt0;
                    dp[i+1][min(j+1,k)][1]+=dp[i][j][l]*cnt1;
                }
            }
        }
        cout<<dp[d][k][0]<<"\n";
    }


}

void setup() {
    if (ddebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    } else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() { ll i, j, k; }

signed main() {
    setup();
    preprocess();
    ll t = 1;
    cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++) {
        solve(testcase);
    }
    return 0;
}
